
<script type="text/javascript" src="/javascripts/MochiKit/MochiKit.js"></script>
<script type="text/javascript" src="/javascripts/PlotKit/Base.js"></script>
<script type="text/javascript" src="/javascripts/PlotKit/Layout.js"></script>
<script type="text/javascript" src="/javascripts/PlotKit/Canvas.js"></script>
<script type="text/javascript" src="/javascripts/PlotKit/SweetCanvas.js"></script>
<script type="text/javascript" src="/javascripts/tagchart/tagchart.js"></script>
<script type="text/javascript" src="/javascripts/ui/Collapsable.js"></script>

<div id="yui-main">

<div class="title">
  <h1><%= @cloud.name %></h1>
</div>
<%= render :partial => 'cloud/view_menu' %>

<div id="chart">
  <div>
    <canvas id="tag_graph" height="600" width="600" style="position: absolute"></canvas>
  </div>
  <%= link_to_cloud_json @cloud %>
  <script type="text/javascript">
    var chart = new TagChart({});
  </script>
  <script type="text/javascript">
    function makeSettings(settings, element){
      var DL = MochiKit.Base.partial(MochiKit.DOM.createDOM, "DL");
      var DT = MochiKit.Base.partial(MochiKit.DOM.createDOM, "DT");
      var DD = MochiKit.Base.partial(MochiKit.DOM.createDOM, "DD");
      var INPUT = MochiKit.Base.partial(MochiKit.DOM.createDOM, "INPUT");
      
      var defaultGroup = {
        name: "",
        settings: [],
        groups: []
      }
      
      var defaultSetting = {
        name: ""
      }
      
      var controls = {"slider" : function(name, options){
          var slider = new Slider(name);
          slider.min = (options.min instanceof Function) ? options.min() : options.min;
          slider.max = (options.max instanceof Function) ? options.max() : options.max;
          slider.width = 260;
          slider.onchange = options.update
          window.setTimeout(function(){ 
            slider.init(); 
            slider.setValue((options.initial instanceof Function) ? options.initial() : options.initial) 
          }, 10);
          return slider.getElement();
          
      },
      "radioChoice" : function(name, options){
        var init = (options.initial instanceof Function) ? options.initial() : options.initial;
          return options.options.map(function(opt){
            console.log("init " + init  );
            var inputEl = INPUT({type: "radio", 
                          name: name, 
                          value: opt.value, 
                          onchange : function(){options.update(this.value);}
                          }, ""); 
            if(opt.value == init){
              inputEl.checked = true;
            }                          
            return [inputEl, SPAN({}, opt.name)];
          });
      },
      "selectChoice" : function(name, options){
            var init = (options.initial instanceof Function) ? options.initial() : options.initial;
            return SELECT({  onchange : function(){options.update(this.value);} }, options.options.map(
                function(opt){
                  var inputEl = OPTION({ 
                                name: name, 
                                value: opt.value, 
                                }, opt.name); 
                  if(opt.value == init){
                    inputEl.selected = true;
                  } 
                  return inputEl;                         
                }
            ));
      },
      "checkbox" : function(name, options){
          var init = (options.initial instanceof Function) ? options.initial() : options.initial;
          return [INPUT({type: "checkbox", onchange : function(){options.update(this.checked)}, checked : init }), SPAN({}, name)]
        
      }
    };
      
      
      function makeSetting(setting){
        setting = merge(defaultSetting, setting)
        var controlBuilder = controls[setting.control];
        if(!controlBuilder){
          control = "Control '" + settings.control + "' not implemented"
        }else{
          control = controlBuilder(setting.name, setting.controlOptions);          
        }
        return [DT({}, setting.name), DD({}, control)];
      }
      function makeGroup(group){
        group = merge(defaultGroup, group)
        return [DT({}, group.name), DD({}, 
          DL({}, group.settings.map(makeSetting).concat(group.groups.map(makeGroup))))];
      }
      
      var settingsEl = DL({}, settings.map(function(setting){
        return makeGroup(setting);
      }));
      element.innerHTML = "";
      element.appendChild(settingsEl);
     };
    
    var settings =  [
      {  
        name: "Data Settings",
        settings: [{
          name: "Limit", 
          control : "slider", 
          controlOptions : {
             min : 2, 
             max : function(){ return cloud.tag_frequencies.length; },
             initial : function(){ return chart.options.data.limit; },
             update : function(val){ chart.options.data.limit = val; chart.reload();}
          }          
        }]
      },
      {  
        name: "Chart Settings",
        settings: [{
          name: "Chart Type", 
          control : "radioChoice", 
          controlOptions : {
             options : [{name: "Pie", value: "pie"},
                       {name: "Bar", value: "bar"},
                       {name: "Line", value: "line"}], 
             initial : function(){ return chart.options.layout.style; },
             update : function(val){ chart.options.layout.style = val; chart.relayout(); chart.reload();}
          }          
        }],
        groups: [{
          name: "Bar Chart Settings",
          settings : [{
                name: "Orientation",
                control : "radioChoice",
                controlOptions : {
                  options : [{name : "Horizontal", value: "horizontal"},
                             {name: "Vertical", value: "vertical"}],
                  initial : function(){ return chart.options.layout.barOrientation; },
                  update : function(val){  chart.options.layout.barOrientation = val;  chart.relayout();  chart.reload();}
                }
            },{
                name : "Bar Width",
                control : "slider",
                controlOptions : {
                  min : 0,
                  max : 100,
                  initial : function(){ return chart.options.layout.barWidthFillFraction*100;},
                  update : function(val){  chart.options.layout.barWidthFillFraction = val/100;  chart.relayout();  chart.reload();}  
                }
            }
          ]
        },
       ] 

      },
      {  
        name: "Display Settings",
        groups: [{
            name : "Basic Options",
            settings: [{
              name: "Color Scheme",
              control : "selectChoice",
              controlOptions : {
                  options : [{name : "Bright Primary Colors", value : "colorScheme"},
                             {name : "Primary Colors", value : "basePrimaryColors"},
                             {value : "baseBlueColors", name : "3-Color Blue"},
                             {value : "officeBlue", name : "Blue"},
                             {value : "officeRed", name : "Red"},
                             {value : "officeGreen", name : "Green"},
                             {value : "officePurple", name : "Purple"},
                             {value : "officeCyan", name : "Cyan"},
                             {value : "officeOrange", name : "Orange"},
                             {value : "officeBlack", name : "Black"}],
                  initial : function(){ return chart.options.renderer.colorScheme; },
                  update : function(scheme){  
                                var colors = PlotKit.Base[scheme]();
                                if(colors.colorScheme){
                                  MochiKit.Base.update(chart.options.renderer, colors);
                                }else{
                                  chart.options.renderer.colorScheme = colors;
                                  chart.options.renderer.backgroundColor = MochiKit.Color.Color.fromHexString("#ffffff");
                                }
                                chart.rerender();
                                chart.reload(); 
                            },
              },
            },{
              name: "Fill",
              control: "checkbox",
              controlOptions : {
                    initial : function(){ return chart.options.renderer.shouldFill;},
                    update : function(val){  chart.options.renderer.shouldFill=val;  chart.rerender();  chart.reload();}
              }
            },
            {
              name: "Stroke",
              control: "checkbox",
              controlOptions : {
                    initial : function(){ return chart.options.renderer.shouldStroke;},
                    update : function(val){  chart.options.renderer.shouldStroke=val;  chart.rerender();  chart.reload();}
              }
            },//Stroke
            {
              name: "Background",
              control: "checkbox",
              controlOptions : {
                    initial : function(){ return chart.options.renderer.drawBackground;},
                    update : function(val){  chart.options.renderer.drawBackground=val;  chart.rerender();  chart.reload();}
              }
            }//Background

          ]//settings
        },//Basic Options
        {
          name: "Axes",
           settings: [{
              name : "Show X-Axis",
              control : "checkbox",
              controlOptions : {
                initial : function(){ return chart.options.renderer.drawXAxis; },
                update : function(val){ chart.options.renderer.drawXAxis = val; chart.rerender(); chart.reload(); },
              },
            },
            {
              name : "Show Y-Axis",
              control : "checkbox",
              controlOptions : {
                initial : function(){ return chart.options.renderer.drawYAxis; },
                update : function(val){ chart.options.renderer.drawYAxis = val; chart.rerender(); chart.reload(); },
              },
            },
            {
              name : "Line Width",
              control : "slider",
              controlOptions : {
                min : 0,
                max : 5.0,
                initial : function(){ return chart.options.renderer.axisLineWidth},
                update : function(val){ chart.options.renderer.axisLineWidth = val; chart.rerender(); chart.reload(); },
              },
            },
            {
              name : "Tick Size",
              control : "slider",
              controlOptions : {
                min : 0,
                max: 20,
                initial : function(){ return chart.options.renderer.axisTickSize},
                update : function(val){ chart.options.renderer.axisTickSize = val; chart.rerender(); chart.reload() },
              }
            },
            {
              name : "Label Width",
              control : "slider",
              controlOptions : {
                min : 0,
                max : 200,
                initial : function(){ return chart.options.renderer.axisLabelWidth},
                update : function(val){ chart.options.renderer.axisLabelWidth = val; chart.rerender(); chart.reload() }
              }
            },
            {
              name : "Label - Font Size",
              control : "slider",
              controlOptions : {
                min : 0,
                max : 20,
                initial : function(){ return chart.options.renderer.axisLabelFontSize},
                update : function(val){ chart.options.renderer.axisLabelFontSize = val; chart.rerender(); chart.reload() }
              }
            }
            ]//Settings
        }//Axes
        ]//groups
      }];
    window.addEventListener("load", function(){ makeSettings(settings, document.getElementById("settings"))}, true);
    window.addEventListener("load", 
                            function(){  
                             var subList = cssQuery("#settings dl");
                             subList.forEach(
                               function(element){
                                 new Collapsable(element, {initiallyHidden: true});
                               }
                             );
                            }, 
                            true);
  </script>
</div>

<script type="text/javascript">
var myTabs = new YAHOO.widget.TabView("controls");
</script> 
 
<div id="controls" class="yui-navset">
    <ul class="yui-nav">
        <li class="selected"><a href="#settings"><em>Settings</em></a></li>
        <li><a href="#export"><em>Export</em></a></li>
    </ul>
    <div class="yui-content">
        <div id="settings" class="panel visible">
        </div>

        <div id="export" class="panel">
        </div>
    </div>
</div>

<div id="links">
<%= link_to 'Edit', :action => 'edit', :id => @cloud %> |
<%= link_to 'Back', :action => 'index' %>
</div>


</div>
